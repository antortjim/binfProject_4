"Endurance", "Endurance vs power", "Fat", "Gluten intolerance",
"Heart rate trainability", "Heart Health/Cardiovascular Disease",
"High altitude training", "Inflammation", "Injury CT", "Injury muscles",
"Iron", "Irritable bowel syndrome", "Lactose intolerance", "Memory",
"Migraine", "Motivation to train", "Muscle fatigue", "Muscle fiber composition",
"Muscle growth", "Omega 3/6", "Power", "Protein metabolism - Homocysteine levels",
"Protein metabolism - Thyrosinemia", "Protein Uptake", "Response to diet", "Salt",
"Skin (Aging)", "Skin (Cellulite)", "Skin (Scarring)", "Skin (Sun)", "Sleep Quality",
"Sweating/body odour", "Sweet tooth", "Testosterone (male only)", "Thrill seeking",
"Vitamin A", "Vitamin B", "Vitamin C", "Vitamin D", "Vitamin E", "VO2max")
start <- which(data[[1]] %in% categories)
end <- c(start[-1] - 1, length(start))
data_frame_list <- list()
for (i in 1:length(start)) {
result <- data[(start[i]+1):end[i],-1]
data_frame_list[[categories[i]]] <- result[rowSums(is.na(result)) != ncol(result),]
}
data_frame_list$Alcohol %>% View
i <- 1
result <- data[(start[i]+1):end[i],-1]
result
library("readxl")
library("dplyr")
library("here")
excel_file <- here("MEGA", "AthGene", "data", "category.xlsx")
data <- read_xlsx(path = excel_file)
colnames(data)[11:13] <- c("maj/maj",	"maj/min", "min/min")
toMatch <- c("sc\\.", "impact", "Rel\\.", "Cit", "art", "X__4")
remove_columns <- grep(pattern = paste(toMatch,collapse="|"),
ignore.case = T,
x = colnames(data))
data <- data[-1, -remove_columns]
categories <- c("Alcohol", "Appetite", "Bone density", "Caffeine", "Calcium",
"Carbohydrates", "Cravings/Emotional eating/Binge eating",
"Endurance", "Endurance vs power", "Fat", "Gluten intolerance",
"Heart rate trainability", "Heart Health/Cardiovascular Disease",
"High altitude training", "Inflammation", "Injury CT", "Injury muscles",
"Iron", "Irritable bowel syndrome", "Lactose intolerance", "Memory",
"Migraine", "Motivation to train", "Muscle fatigue", "Muscle fiber composition",
"Muscle growth", "Omega 3/6", "Power", "Protein metabolism - Homocysteine levels",
"Protein metabolism - Thyrosinemia", "Protein Uptake", "Response to diet", "Salt",
"Skin (Aging)", "Skin (Cellulite)", "Skin (Scarring)", "Skin (Sun)", "Sleep Quality",
"Sweating/body odour", "Sweet tooth", "Testosterone (male only)", "Thrill seeking",
"Vitamin A", "Vitamin B", "Vitamin C", "Vitamin D", "Vitamin E", "VO2max")
start <- which(data[[1]] %in% categories)
end <- c(start[-1] - 1, length(start))
data_frame_list <- list()
result <- data[(start[i]+1):end[i],-1]
result
rm(i)
data_frame_list <- list()
for (i in 1:length(start)) {
result <- data[(start[i]+1):end[i],-1]
data_frame_list[[categories[i]]] <- result[rowSums(is.na(result)) != ncol(result),]
}
data_frame_list$Alcohol %>% View
data$"Risk" allele (if relevant)
data$"Risk" allele (if relevant)"
data$"Risk allele (if relevant)"
data[["Risk allele (if relevant)"]]
data[["\"Risk\" allele (if relevant)"]]
toMatch <- c("sc\\.", "impact", "Rel.", "Cit", "art", "X__4")
toMatch
remove_columns <- grep(pattern = paste(toMatch,collapse="|"),
ignore.case = T,
x = colnames(data))
remove_columns
library("readxl")
library("dplyr")
library("here")
excel_file <- here("MEGA", "AthGene", "data", "category.xlsx")
data <- read_xlsx(path = excel_file)
colnames(data)[11:13] <- c("maj/maj",	"maj/min", "min/min")
toMatch <- c("sc\\.", "impact", "Rel.", "Cit", "art", "X__4")
remove_columns <- grep(pattern = paste(toMatch,collapse="|"),
ignore.case = T,
x = colnames(data))
data <- data[-1, -remove_columns]
categories <- c("Alcohol", "Appetite", "Bone density", "Caffeine", "Calcium",
"Carbohydrates", "Cravings/Emotional eating/Binge eating",
"Endurance", "Endurance vs power", "Fat", "Gluten intolerance",
"Heart rate trainability", "Heart Health/Cardiovascular Disease",
"High altitude training", "Inflammation", "Injury CT", "Injury muscles",
"Iron", "Irritable bowel syndrome", "Lactose intolerance", "Memory",
"Migraine", "Motivation to train", "Muscle fatigue", "Muscle fiber composition",
"Muscle growth", "Omega 3/6", "Power", "Protein metabolism - Homocysteine levels",
"Protein metabolism - Thyrosinemia", "Protein Uptake", "Response to diet", "Salt",
"Skin (Aging)", "Skin (Cellulite)", "Skin (Scarring)", "Skin (Sun)", "Sleep Quality",
"Sweating/body odour", "Sweet tooth", "Testosterone (male only)", "Thrill seeking",
"Vitamin A", "Vitamin B", "Vitamin C", "Vitamin D", "Vitamin E", "VO2max")
start <- which(data[[1]] %in% categories)
end <- c(start[-1] - 1, length(start))
data_frame_list <- list()
for (i in 1:length(start)) {
result <- data[(start[i]+1):end[i],-1]
data_frame_list[[categories[i]]] <- result[rowSums(is.na(result)) != ncol(result),]
}
data_frame_list$Alcohol %>% View
do.call(data_frame_list, rbind)
do.call(rbind, data_frame_list)
tidy_data <- do.call(rbind, data_frame_list)
View(tidy_data)
data_frame_list <- list()
for (i in 1:length(start)) {
# select the corresponding rows
result <- data[(start[i]+1):end[i],-1]
# remove empty rows
result <- result[rowSums(is.na(result)) != ncol(result),]
# add colum saying the category
result <- cbind(result, category = categories[i])
# add it to the list
data_frame_list[[categories[i]]] <- result
}
data_frame_list <- list()
for (i in 1:length(start)) {
# select the corresponding rows
result <- data[(start[i]+1):end[i],-1]
# remove empty rows
result <- result[rowSums(is.na(result)) != ncol(result),]
# add colum saying the category
print(nrow(result))
result <- cbind(result, category = categories[i])
# add it to the list
data_frame_list[[categories[i]]] <- result
}
start
end
start <- which(data[[1]] %in% categories)
end <- c(start[-1] - 1, nrow(data))
end
data_frame_list <- list()
for (i in 1:length(start)) {
# select the corresponding rows
result <- data[(start[i]+1):end[i],-1]
# remove empty rows
result <- result[rowSums(is.na(result)) != ncol(result),]
# add colum saying the category
print(nrow(result))
result <- cbind(result, category = categories[i])
# add it to the list
data_frame_list[[categories[i]]] <- result
}
tidy_data <- do.call(rbind, data_frame_list)
end
View(data)
start
end
data_frame_list <- list()
for (i in 1:length(start)) {
# select the corresponding rows
result <- data[(start[i]+1):end[i],-1]
# remove empty rows
result <- result[rowSums(is.na(result)) != ncol(result),]
# add colum saying the category
print(nrow(result))
result <- cbind(result, category = categories[i])
# add it to the list
data_frame_list[[categories[i]]] <- result
}
i <- 48
result <- data[(start[i]+1):end[i],-1]
result
result <- result[rowSums(is.na(result)) != ncol(result),]
result
print(nrow(result))
result <- cbind(result, category = categories[i])
start <- which(data[[1]] %in% categories)
end <- c(start[-1] - 1, nrow(data))
data_frame_list <- list()
for (i in 1:nrow(data)) {
# select the corresponding rows
result <- data[(start[i]+1):end[i],-1]
# remove empty rows
result <- result[rowSums(is.na(result)) != ncol(result),]
# add colum saying the category
print(nrow(result))
result <- cbind(result, category = categories[i])
# add it to the list
data_frame_list[[categories[i]]] <- result
}
data_frame_list <- list()
for (i in 1:nrow(data)) {
# select the corresponding rows
result <- data[(start[i]+1):end[i],-1]
# remove empty rows
result <- result[rowSums(is.na(result)) != ncol(result),]
# add colum saying the category
print(i)
print(nrow(result))
result <- cbind(result, category = categories[i])
# add it to the list
data_frame_list[[categories[i]]] <- result
}
categories[13]
start <- which(data[[1]] %in% categories)
end <- c(start[-1] - 1, nrow(data))
data_frame_list <- list()
for (i in 1:nrow(data)) {
# select the corresponding rows
result <- data[(start[i]+1):end[i],-1]
# remove empty rows
result <- result[rowSums(is.na(result)) != ncol(result),]
# add colum saying the category
if(nrow(result) == 0) {
categories <- categories[-i]
next
}
result <- cbind(result, category = categories[i])
# add it to the list
data_frame_list[[categories[i]]] <- result
}
data_frame_list <- list()
for (i in 1:nrow(data)) {
print(i)
# select the corresponding rows
result <- data[(start[i]+1):end[i],-1]
# remove empty rows
result <- result[rowSums(is.na(result)) != ncol(result),]
# add colum saying the category
if(nrow(result) == 0) {
categories <- categories[-i]
next
}
result <- cbind(result, category = categories[i])
# add it to the list
data_frame_list[[categories[i]]] <- result
}
1:nrow(data)
categories <- c("Alcohol", "Appetite", "Bone density", "Caffeine", "Calcium",
"Carbohydrates", "Cravings/Emotional eating/Binge eating",
"Endurance", "Endurance vs power", "Fat", "Gluten intolerance",
"Heart rate trainability", "Heart Health/Cardiovascular Disease",
"High altitude training", "Inflammation", "Injury CT", "Injury muscles",
"Iron", "Irritable bowel syndrome", "Lactose intolerance", "Memory",
"Migraine", "Motivation to train", "Muscle fatigue", "Muscle fiber composition",
"Muscle growth", "Omega 3/6", "Power", "Protein metabolism - Homocysteine levels",
"Protein metabolism - Thyrosinemia", "Protein Uptake", "Response to diet", "Salt",
"Skin (Aging)", "Skin (Cellulite)", "Skin (Scarring)", "Skin (Sun)", "Sleep Quality",
"Sweating/body odour", "Sweet tooth", "Testosterone (male only)", "Thrill seeking",
"Vitamin A", "Vitamin B", "Vitamin C", "Vitamin D", "Vitamin E", "VO2max")
start <- which(data[[1]] %in% categories)
end <- c(start[-1] - 1, nrow(data))
data_frame_list <- list()
for (i in 1:length(categories)) {
print(i)
# select the corresponding rows
result <- data[(start[i]+1):end[i],-1]
# remove empty rows
result <- result[rowSums(is.na(result)) != ncol(result),]
# add colum saying the category
if(nrow(result) == 0) {
categories <- categories[-i]
next
}
result <- cbind(result, category = categories[i])
# add it to the list
data_frame_list[[categories[i]]] <- result
}
tidy_data <- do.call(rbind, data_frame_list)
View(tidy_data)
rownames(tidy_data) <- NULL
View(tidy_data)
library("readxl")
library("dplyr")
library("here")
excel_file <- here("MEGA", "AthGene", "data", "category.xlsx")
data <- read_xlsx(path = excel_file)
colnames(data)[11:13] <- c("maj/maj",	"maj/min", "min/min")
toMatch <- c("sc\\.", "impact", "Rel.", "Cit", "art", "X__4")
remove_columns <- grep(pattern = paste(toMatch,collapse="|"),
ignore.case = T,
x = colnames(data))
data <- data[-1, -remove_columns]
colnames(data)
colnames(data)[c(4, 14)]
colnames(data)[c(2, 3, 4, 9, 14)]
colnames(data)[c(2, 3, 4, 9, 14, 18)]
colnames(data)[c(2, 3, 4, 9, 14, 18)] <- c("gene", "gene.name", "protein.type", "ensembl", "confidence", "eur.freq")
categories <- c("Alcohol", "Appetite", "Bone density", "Caffeine", "Calcium",
"Carbohydrates", "Cravings/Emotional eating/Binge eating",
"Endurance", "Endurance vs power", "Fat", "Gluten intolerance",
"Heart rate trainability", "Heart Health/Cardiovascular Disease",
"High altitude training", "Inflammation", "Injury CT", "Injury muscles",
"Iron", "Irritable bowel syndrome", "Lactose intolerance", "Memory",
"Migraine", "Motivation to train", "Muscle fatigue", "Muscle fiber composition",
"Muscle growth", "Omega 3/6", "Power", "Protein metabolism - Homocysteine levels",
"Protein metabolism - Thyrosinemia", "Protein Uptake", "Response to diet", "Salt",
"Skin (Aging)", "Skin (Cellulite)", "Skin (Scarring)", "Skin (Sun)", "Sleep Quality",
"Sweating/body odour", "Sweet tooth", "Testosterone (male only)", "Thrill seeking",
"Vitamin A", "Vitamin B", "Vitamin C", "Vitamin D", "Vitamin E", "VO2max")
start <- which(data[[1]] %in% categories)
end <- c(start[-1] - 1, nrow(data))
data_frame_list <- list()
for (i in 1:length(categories)) {
print(i)
# select the corresponding rows
result <- data[(start[i]+1):end[i],-1]
# remove empty rows
result <- result[rowSums(is.na(result)) != ncol(result),]
# add colum saying the category
if(nrow(result) == 0) {
categories <- categories[-i]
next
}
result <- cbind(result, category = categories[i])
# add it to the list
data_frame_list[[categories[i]]] <- result
}
tidy_data <- do.call(rbind, data_frame_list)
rownames(tidy_data) <- NULL
View(tidy_data)
here("rs_code_fitness")
library("here", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:here", unload=TRUE)
here()
library(here)
here()
here("MEGA/AthGene")
here()
set_here("/home/antortjim/MEGA/AthGene")
here()
detach("package:here", unload=TRUE)
library("here", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
arguments <- commandArgs(trailingOnly = T)
data.dir <- arguments[[1]]
suppressMessages(library("pegas"))
suppressMessages(library("BiocParallel"))
suppressMessages(library("plyr"))
suppressMessages(library("dplyr"))
suppressMessages(library("tibble"))
suppressMessages(library("beepr"))
flipper <- c("A", "C", "G", "T")
names(flipper) <- rev(flipper)
flip_strand <- function(myRow) {
# transforms metadata of markers in reverse strand (BOT) so
# that they are displayed as if they were in the forward (TOP)
if(myRow["strand"] == "-") {
myRow["allele_1"] <- flipper[myRow["allele_1"]]
myRow["allele_2"] <- flipper[myRow["allele_2"]]
}
return(myRow)
}
message("Reading data")
# read genes metadata
fl <- paste(data.dir, "metadata_subset.txt", sep = "/")
metadata <- read.table(file = fl, na.strings = c("."),
stringsAsFactors = F,
col.names = c("illumina_code", "chr", "coord",
"strand", "transcript",
"gene", "in-exon", "mutation", "freqAA",
"freqAB", "freqBB", "call-freq", "MAF", "rs_code"))
# message("Flipping alleles to + strand")
# alleles <- lapply(X = metadata$alleles, FUN = function(x) strsplit(x = x, split = "")) %>%
#   unlist %>% matrix(ncol = 2, byrow = T, dimnames = list(NULL, c("allele_1", "allele_2")))
# metadata <- data.frame(select(metadata, -alleles), alleles)
# metadata <- t(apply(X = metadata,
#                 MARGIN = 1,
#                 FUN = function(x) {flip_strand(x)})) %>%
#   as.data.frame(stringsAsFactors = F)
metadata$cM <- 0
metadata %>% arrange(chr) %>% write.table(file = "metadata.txt",
quote = F, row.names = F, sep = "\t")
# read data from AthGene
data.fl <- paste(data.dir, "data_purged_transposed.tsv", sep = "/")
id.fl <- paste(data.dir, "marker_ids.frequent", sep = "/")
index.fl <- paste(data.dir, "selected_rows", sep = "/")
id <- read.table(file = id.fl, stringsAsFactors = F)[,1]
index <- read.table(file = index.fl)[,1]
column_names <- metadata %>% apply(MARGIN = 1, function(x) {
x[c("illumina_code", "chr", "rs_code", "cM", "coord")] %>% as.character %>% paste(collapse = ":") }) %>%
gsub(pattern = " ", replacement = "")
n_batches <- 11
batches <- rep((1:n_batches), each = 48) %>% as.factor
data.dir <- "../data"
suppressMessages(library("pegas"))
suppressMessages(library("BiocParallel"))
suppressMessages(library("plyr"))
suppressMessages(library("dplyr"))
suppressMessages(library("tibble"))
suppressMessages(library("beepr"))
flipper <- c("A", "C", "G", "T")
names(flipper) <- rev(flipper)
flip_strand <- function(myRow) {
# transforms metadata of markers in reverse strand (BOT) so
# that they are displayed as if they were in the forward (TOP)
if(myRow["strand"] == "-") {
myRow["allele_1"] <- flipper[myRow["allele_1"]]
myRow["allele_2"] <- flipper[myRow["allele_2"]]
}
return(myRow)
}
message("Reading data")
# read genes metadata
fl <- paste(data.dir, "metadata_subset.txt", sep = "/")
metadata <- read.table(file = fl, na.strings = c("."),
stringsAsFactors = F,
col.names = c("illumina_code", "chr", "coord",
"strand", "transcript",
"gene", "in-exon", "mutation", "freqAA",
"freqAB", "freqBB", "call-freq", "MAF", "rs_code"))
# message("Flipping alleles to + strand")
# alleles <- lapply(X = metadata$alleles, FUN = function(x) strsplit(x = x, split = "")) %>%
#   unlist %>% matrix(ncol = 2, byrow = T, dimnames = list(NULL, c("allele_1", "allele_2")))
# metadata <- data.frame(select(metadata, -alleles), alleles)
# metadata <- t(apply(X = metadata,
#                 MARGIN = 1,
#                 FUN = function(x) {flip_strand(x)})) %>%
#   as.data.frame(stringsAsFactors = F)
metadata$cM <- 0
metadata %>% arrange(chr) %>% write.table(file = "metadata.txt",
quote = F, row.names = F, sep = "\t")
# read data from AthGene
data.fl <- paste(data.dir, "data_purged_transposed.tsv", sep = "/")
id.fl <- paste(data.dir, "marker_ids.frequent", sep = "/")
index.fl <- paste(data.dir, "selected_rows", sep = "/")
id <- read.table(file = id.fl, stringsAsFactors = F)[,1]
index <- read.table(file = index.fl)[,1]
column_names <- metadata %>% apply(MARGIN = 1, function(x) {
x[c("illumina_code", "chr", "rs_code", "cM", "coord")] %>% as.character %>% paste(collapse = ":") }) %>%
gsub(pattern = " ", replacement = "")
n_batches <- 11
batches <- rep((1:n_batches), each = 48) %>% as.factor
getwd()
setwd("MEGA/AthGene/code/")
data.dir <- "../data"
suppressMessages(library("pegas"))
suppressMessages(library("BiocParallel"))
suppressMessages(library("plyr"))
suppressMessages(library("dplyr"))
suppressMessages(library("tibble"))
suppressMessages(library("beepr"))
flipper <- c("A", "C", "G", "T")
names(flipper) <- rev(flipper)
flip_strand <- function(myRow) {
# transforms metadata of markers in reverse strand (BOT) so
# that they are displayed as if they were in the forward (TOP)
if(myRow["strand"] == "-") {
myRow["allele_1"] <- flipper[myRow["allele_1"]]
myRow["allele_2"] <- flipper[myRow["allele_2"]]
}
return(myRow)
}
message("Reading data")
# read genes metadata
fl <- paste(data.dir, "metadata_subset.txt", sep = "/")
metadata <- read.table(file = fl, na.strings = c("."),
stringsAsFactors = F,
col.names = c("illumina_code", "chr", "coord",
"strand", "transcript",
"gene", "in-exon", "mutation", "freqAA",
"freqAB", "freqBB", "call-freq", "MAF", "rs_code"))
# message("Flipping alleles to + strand")
# alleles <- lapply(X = metadata$alleles, FUN = function(x) strsplit(x = x, split = "")) %>%
#   unlist %>% matrix(ncol = 2, byrow = T, dimnames = list(NULL, c("allele_1", "allele_2")))
# metadata <- data.frame(select(metadata, -alleles), alleles)
# metadata <- t(apply(X = metadata,
#                 MARGIN = 1,
#                 FUN = function(x) {flip_strand(x)})) %>%
#   as.data.frame(stringsAsFactors = F)
metadata$cM <- 0
metadata %>% arrange(chr) %>% write.table(file = "metadata.txt",
quote = F, row.names = F, sep = "\t")
# read data from AthGene
data.fl <- paste(data.dir, "data_purged_transposed.tsv", sep = "/")
id.fl <- paste(data.dir, "marker_ids.frequent", sep = "/")
index.fl <- paste(data.dir, "selected_rows", sep = "/")
id <- read.table(file = id.fl, stringsAsFactors = F)[,1]
index <- read.table(file = index.fl)[,1]
column_names <- metadata %>% apply(MARGIN = 1, function(x) {
x[c("illumina_code", "chr", "rs_code", "cM", "coord")] %>% as.character %>% paste(collapse = ":") }) %>%
gsub(pattern = " ", replacement = "")
n_batches <- 11
batches <- rep((1:n_batches), each = 48) %>% as.factor
df <- read.table(file = data.fl, sep = " ", header = T,
na.strings =  "--", stringsAsFactors = F, check.names = F,
col.names = column_names, nrows = 48 * n_batches)
df <- df[,1:2]
message("Generating genind object")
genind_df <- df2genind(df, sep = "")
message("Generating loci object")
loci_df <- as.loci(genind_df)
message("Exporting tped and tfam files")
tped.fl <- paste(data.dir, "athgene", sep = "/")
tfam.fl <- paste(data.dir, "athgene.fam", sep = "/")
write.loci(x = loci_df, file = tped.fl, loci.sep = "\t", allele.sep = ":",
quote = F, row.names = F, na = "0:0")
system(paste('bash transpose.sh', tped.fl, ' | tr ": " "\t" | cut -f 2- > ', tped.fl, '.tped', sep = ""))
base.dir
data.dir
transpose.script <- paste(data.dir, "../code", sep = "/")
transpose.script
transpose.script <- paste(data.dir, "../code/transpose.sh", sep = "/")
transpose.script
paste('bash ', transpose.script, tped.fl, ' | tr ": " "\t" | cut -f 2- > ', tped.fl, '.tped', sep = "")
paste('bash ', transpose.script, " ", tped.fl, ' | tr ": " "\t" | cut -f 2- > ', tped.fl, '.tped', sep = "")
message("Exporting tped and tfam files")
tped.fl <- paste(data.dir, "athgene", sep = "/")
tfam.fl <- paste(data.dir, "athgene.fam", sep = "/")
transpose.script <- paste(data.dir, "../code/transpose.sh", sep = "/")
write.loci(x = loci_df, file = tped.fl, loci.sep = "\t", allele.sep = ":",
quote = F, row.names = F, na = "0:0")
system(paste('bash ', transpose.script, " ", tped.fl, ' | tr ": " "\t" | cut -f 2- > ', tped.fl, '.tped', sep = ""))
tfam <- data.frame(fid = paste("I", 1:(48 * n_batches), sep = ""),
iid = 1,
father = 0,
mother = 0,
sex = 0,
phenotype = -9)
write.table(tfam, file = tfam.fl, quote = F, col.names = F, row.names = F)
?commandArgs
individuals.fl <- paste(data.dir, "1000_genomes/individuals.txt", sep = "/")
individuals.fl
